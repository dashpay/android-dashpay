plugins {
    id 'java'
    id 'kotlin'
    id 'application'
    id 'eclipse'
    id 'signing'
    id 'maven-publish'
    id 'maven'
    //id 'edu.sc.seis.launch4j' version '2.4.8'
}

group 'org.dashj.platform'
version dashpay_version

repositories {
    mavenLocal()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
    mavenCentral()
}

mainClassName = "org.dashj.platform.tools.WalletTool"
applicationName = "wallet-tool"

task createExtraRunApp(type: CreateStartScripts) {
    mainClassName = "org.dashj.platform.tools.NetworkActivity"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'network-activity'
}

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(createExtraRunApp)
    fileMode = 0755
}

task network_activity(type: JavaExec) {
    description = 'Obtain network activity for the specificed network.'
    main = 'org.dashevo.tools.NetworkActivity'
    if (project.hasProperty('appArgs') && appArgs.length() > 0)
        args = Arrays.asList(appArgs.split("\\s+"))
    classpath = sourceSets.main.runtimeClasspath
}

task copyScripts {
    outputs.file new File("$buildDir/generate-report.sh")
    outputs.file new File("$buildDir/generate-report.bat")
    doLast {
        copy {
            from "generate-report.sh", "generate-report.bat"
            into "$buildDir"
        }
    }
}

applicationDistribution.from(copyScripts) {
    into ""
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation project(':platform-core')
    implementation project(':dashpay')
    implementation 'com.google.guava:guava:27.1-android'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.dashj.platform:dpp:$dpp_version"
    implementation "org.dashj.platform:dapi-client:$dapi_client_version"
    implementation "org.dashj:dashj-core:$dashj_version"
    implementation "org.dashj:dashj-bls:0.18-SNAPSHOT"
    implementation 'org.slf4j:slf4j-jdk14:1.7.28'
    implementation 'io.grpc:grpc-okhttp:1.28.0' // CURRENT_GRPC_VERSION
    implementation 'io.grpc:grpc-protobuf-lite:1.28.0' // CURRENT_GRPC_VERSION
    implementation 'io.grpc:grpc-stub:1.28.0' // CURRENT_GRPC_VERSION
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    tasks.withType(Sign)*.enabled = false
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

assemble.dependsOn(publishToMavenLocal)

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            pom.project {
                name 'Dash DashPay Tools'
                packaging 'jar'
                groupId 'org.dashj.platform'
                artifactId 'tools'
                version dashpay_version
                description 'Dash DashPay Tools'
                url 'https://github.com/dashevo/android-dashpay'

                scm {
                    connection 'scm:svn:https://github.com/dashevo/android-dashpay'
                    developerConnection 'scm:svn:https://github.com/dashevo/android-dashpay'
                    url 'https://github.com/dashevo/android-dashpay'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'hashengineering'
                        name 'HashEngineering'
                        email 'hashengineeringsolutions@gmail.com'
                    }
                }
            }
        }
    }
}
